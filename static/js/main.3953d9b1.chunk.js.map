{"version":3,"sources":["App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Hero","React","lazy","About","Education","Experience","Project","Contact","Footer","Navbar","App","refs","useRef","useEffect","current","Array","fill","map","_","i","createRef","href","className","fallback","style","height","componentRef","ref","path","exact","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mPAMMA,EAAOC,IAAMC,MAAK,kBAAM,sDACxBC,EAAQF,IAAMC,MAAK,kBAAM,iCACzBE,EAAYH,IAAMC,MAAK,kBAAM,gCAC7BG,EAAaJ,IAAMC,MAAK,kBAAM,uDAC9BI,EAAUL,IAAMC,MAAK,kBAAM,sDAC3BK,EAAUN,IAAMC,MAAK,kBAAM,sDAC3BM,EAASP,IAAMC,MAAK,kBAAM,iCAC1BO,EAASR,IAAMC,MAAK,kBAAM,sDAiDjBQ,MA/Cf,WACE,IAAMC,EAAOC,iBAAO,IAMpB,OAJAC,qBAAU,WACRF,EAAKG,QAAUC,MAAM,GAAGC,OAAOC,KAAI,SAACC,EAAGC,GAAJ,OAAUR,EAAKG,QAAQK,IAAMlB,IAAMmB,iBACrE,IAGD,mCACE,eAAC,IAAD,WACE,mBAAGC,KAAK,WAAWC,UAAU,kBAA7B,6BACA,iCACE,cAAC,WAAD,CAAUC,SAAU,qBAAKD,UAAU,UAAUE,MAAO,CAAEC,OAAQ,QAA1C,wBAApB,SACE,cAAChB,EAAD,CAAQE,KAAMA,QAGlB,iCACE,cAAC,WAAD,CAAUY,SAAU,qBAAKD,UAAU,UAAUE,MAAO,CAAEC,OAAQ,WAA9D,SACE,cAACzB,EAAD,CAAM0B,aAAc,SAACC,GAAUhB,EAAKG,QAAQ,GAAKa,OAEnD,cAAC,WAAD,CAAUJ,SAAU,qBAAKD,UAAU,UAAUE,MAAO,CAAEC,OAAQ,WAA9D,SACE,cAACtB,EAAD,CAAOuB,aAAc,SAACC,GAAUhB,EAAKG,QAAQ,GAAKa,OAEpD,cAAC,WAAD,CAAUJ,SAAU,qBAAKD,UAAU,UAAUE,MAAO,CAAEC,OAAQ,WAA9D,SACE,cAACrB,EAAD,CAAWsB,aAAc,SAACC,GAAUhB,EAAKG,QAAQ,GAAKa,OAExD,cAAC,WAAD,CAAUJ,SAAU,qBAAKD,UAAU,UAAUE,MAAO,CAAEC,OAAQ,WAA9D,SACE,cAACpB,EAAD,CAAYqB,aAAc,SAACC,GAAUhB,EAAKG,QAAQ,GAAKa,OAEzD,cAAC,WAAD,CAAUJ,SAAU,qBAAKD,UAAU,UAAUE,MAAO,CAAEC,OAAQ,YAA9D,SACE,cAACnB,EAAD,CAASoB,aAAc,SAACC,GAAUhB,EAAKG,QAAQ,GAAKa,OAEtD,cAAC,WAAD,CAAUJ,SAAU,qBAAKD,UAAU,UAAUE,MAAO,CAAEC,OAAQ,WAA9D,SACE,cAAClB,EAAD,CAASmB,aAAc,SAACC,GAAUhB,EAAKG,QAAQ,GAAKa,OAEtD,cAAC,IAAD,UACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,SAGzB,cAAC,WAAD,CAAUN,SAAU,qBAAKD,UAAU,UAAUE,MAAO,CAAEC,OAAQ,SAA1C,wBAApB,SACE,cAACjB,EAAD,YCvCUsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCpBnC,IAceC,EAdS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAEnB,IADLC,EACI,EADJA,OAAQC,EACJ,EADIA,OAAQC,EACZ,EADYA,OAAQC,EACpB,EADoBA,OAAQC,EAC5B,EAD4BA,QAEhCJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBb,MAAK,SAACc,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YEnH5BtB,M","file":"static/js/main.3953d9b1.chunk.js","sourcesContent":["/* eslint-disable linebreak-style */\n/* eslint-disable no-unused-vars */\nimport React, { useRef, useEffect, Suspense } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nconst Hero = React.lazy(() => import('./components/Hero/Hero'));\nconst About = React.lazy(() => import('./components/About/About'));\nconst Education = React.lazy(() => import('./components/Education/Education'));\nconst Experience = React.lazy(() => import('./components/Experience/Experience'));\nconst Project = React.lazy(() => import('./components/Project/Project'));\nconst Contact = React.lazy(() => import('./components/Contact/Contact'));\nconst Footer = React.lazy(() => import('./components/Footer/Footer'));\nconst Navbar = React.lazy(() => import('./components/Navbar/Navbar'));\n\nfunction App() {\n  const refs = useRef([]);\n\n  useEffect(() => {\n    refs.current = Array(6).fill().map((_, i) => refs.current[i] || React.createRef());\n  }, []);\n\n  return (\n    <>\n      <Router>\n        <a href=\"#content\" className=\"skip-to-content\">Skip to Content</a>\n        <header>\n          <Suspense fallback={<div className=\"loading\" style={{ height: '70px' }}>Loading...</div>}>\n            <Navbar refs={refs} />\n          </Suspense>\n        </header>\n        <main>\n          <Suspense fallback={<div className=\"loading\" style={{ height: '100vh' }} />}>\n            <Hero componentRef={(ref) => { refs.current[0] = ref; }} />\n          </Suspense>\n          <Suspense fallback={<div className=\"loading\" style={{ height: '700px' }} />}>\n            <About componentRef={(ref) => { refs.current[1] = ref; }} />\n          </Suspense>\n          <Suspense fallback={<div className=\"loading\" style={{ height: '625px' }} />}>\n            <Education componentRef={(ref) => { refs.current[2] = ref; }} />\n          </Suspense>\n          <Suspense fallback={<div className=\"loading\" style={{ height: '525px' }} />}>\n            <Experience componentRef={(ref) => { refs.current[3] = ref; }} />\n          </Suspense>\n          <Suspense fallback={<div className=\"loading\" style={{ height: '2300px' }} />}>\n            <Project componentRef={(ref) => { refs.current[4] = ref; }} />\n          </Suspense>\n          <Suspense fallback={<div className=\"loading\" style={{ height: '380px' }} />}>\n            <Contact componentRef={(ref) => { refs.current[5] = ref; }} />\n          </Suspense>\n          <Switch>\n            <Route path=\"/\" exact />\n          </Switch>\n        </main>\n        <Suspense fallback={<div className=\"loading\" style={{ height: '117px' }}>Loading...</div>}>\n          <Footer />\n        </Suspense>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","/* eslint-disable linebreak-style */\n/* eslint-disable no-console */\n/* eslint-disable no-use-before-define */\n/* eslint-disable operator-linebreak */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","/* eslint-disable linebreak-style */\nconst reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/* eslint-disable linebreak-style */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}